"use strict";
/*
* Copyright (c) 2011 Erin Catto http://www.box2d.org
*
* This software is provided 'as-is', without any express or implied
* warranty.  In no event will the authors be held liable for any damages
* arising from the use of this software.
* Permission is granted to anyone to use this software for any purpose,
* including commercial applications, and to alter it and redistribute it
* freely, subject to the following restrictions:
* 1. The origin of this software must not be misrepresented; you must not
* claim that you wrote the original software. If you use this software
* in a product, an acknowledgment in the product documentation would be
* appreciated but is not required.
* 2. Altered source versions must be plainly marked as such, and must not be
* misrepresented as being the original software.
* 3. This notice may not be removed or altered from any source distribution.
*/
Object.defineProperty(exports, "__esModule", { value: true });
// DEBUG: import { b2Assert } from "../Common/b2Settings";
var b2Settings_1 = require("../Common/b2Settings");
var b2Math_1 = require("../Common/b2Math");
var b2Draw_1 = require("../Common/b2Draw");
///
var b2RopeDef = /** @class */ (function () {
    function b2RopeDef() {
        ///
        this.vertices = [];
        ///
        this.count = 0;
        ///
        this.masses = [];
        ///
        this.gravity = new b2Math_1.b2Vec2(0, 0);
        ///
        this.damping = 0.1;
        /// Stretching stiffness
        this.k2 = 0.9;
        /// Bending stiffness. Values above 0.5 can make the simulation blow up.
        this.k3 = 0.1;
    }
    return b2RopeDef;
}());
exports.b2RopeDef = b2RopeDef;
///
var b2Rope = /** @class */ (function () {
    function b2Rope() {
        this.m_count = 0;
        this.m_ps = [];
        this.m_p0s = [];
        this.m_vs = [];
        this.m_ims = [];
        this.m_Ls = [];
        this.m_as = [];
        this.m_gravity = new b2Math_1.b2Vec2();
        this.m_damping = 0;
        this.m_k2 = 1;
        this.m_k3 = 0.1;
    }
    b2Rope.prototype.GetVertexCount = function () {
        return this.m_count;
    };
    b2Rope.prototype.GetVertices = function () {
        return this.m_ps;
    };
    ///
    b2Rope.prototype.Initialize = function (def) {
        // DEBUG: b2Assert(def.count >= 3);
        this.m_count = def.count;
        // this.m_ps = (b2Vec2*)b2Alloc(this.m_count * sizeof(b2Vec2));
        this.m_ps = b2Math_1.b2Vec2.MakeArray(this.m_count);
        // this.m_p0s = (b2Vec2*)b2Alloc(this.m_count * sizeof(b2Vec2));
        this.m_p0s = b2Math_1.b2Vec2.MakeArray(this.m_count);
        // this.m_vs = (b2Vec2*)b2Alloc(this.m_count * sizeof(b2Vec2));
        this.m_vs = b2Math_1.b2Vec2.MakeArray(this.m_count);
        // this.m_ims = (float32*)b2Alloc(this.m_count * sizeof(float32));
        this.m_ims = b2Settings_1.b2MakeNumberArray(this.m_count);
        for (var i = 0; i < this.m_count; ++i) {
            this.m_ps[i].Copy(def.vertices[i]);
            this.m_p0s[i].Copy(def.vertices[i]);
            this.m_vs[i].SetZero();
            var m = def.masses[i];
            if (m > 0) {
                this.m_ims[i] = 1 / m;
            }
            else {
                this.m_ims[i] = 0;
            }
        }
        var count2 = this.m_count - 1;
        var count3 = this.m_count - 2;
        // this.m_Ls = (float32*)be2Alloc(count2 * sizeof(float32));
        this.m_Ls = b2Settings_1.b2MakeNumberArray(count2);
        // this.m_as = (float32*)b2Alloc(count3 * sizeof(float32));
        this.m_as = b2Settings_1.b2MakeNumberArray(count3);
        for (var i = 0; i < count2; ++i) {
            var p1 = this.m_ps[i];
            var p2 = this.m_ps[i + 1];
            this.m_Ls[i] = b2Math_1.b2Vec2.DistanceVV(p1, p2);
        }
        for (var i = 0; i < count3; ++i) {
            var p1 = this.m_ps[i];
            var p2 = this.m_ps[i + 1];
            var p3 = this.m_ps[i + 2];
            var d1 = b2Math_1.b2Vec2.SubVV(p2, p1, b2Math_1.b2Vec2.s_t0);
            var d2 = b2Math_1.b2Vec2.SubVV(p3, p2, b2Math_1.b2Vec2.s_t1);
            var a = b2Math_1.b2Vec2.CrossVV(d1, d2);
            var b = b2Math_1.b2Vec2.DotVV(d1, d2);
            this.m_as[i] = b2Math_1.b2Atan2(a, b);
        }
        this.m_gravity.Copy(def.gravity);
        this.m_damping = def.damping;
        this.m_k2 = def.k2;
        this.m_k3 = def.k3;
    };
    ///
    b2Rope.prototype.Step = function (h, iterations) {
        if (h === 0) {
            return;
        }
        var d = Math.exp(-h * this.m_damping);
        for (var i = 0; i < this.m_count; ++i) {
            this.m_p0s[i].Copy(this.m_ps[i]);
            if (this.m_ims[i] > 0) {
                this.m_vs[i].SelfMulAdd(h, this.m_gravity);
            }
            this.m_vs[i].SelfMul(d);
            this.m_ps[i].SelfMulAdd(h, this.m_vs[i]);
        }
        for (var i = 0; i < iterations; ++i) {
            this.SolveC2();
            this.SolveC3();
            this.SolveC2();
        }
        var inv_h = 1 / h;
        for (var i = 0; i < this.m_count; ++i) {
            b2Math_1.b2Vec2.MulSV(inv_h, b2Math_1.b2Vec2.SubVV(this.m_ps[i], this.m_p0s[i], b2Math_1.b2Vec2.s_t0), this.m_vs[i]);
        }
    };
    b2Rope.prototype.SolveC2 = function () {
        var count2 = this.m_count - 1;
        for (var i = 0; i < count2; ++i) {
            var p1 = this.m_ps[i];
            var p2 = this.m_ps[i + 1];
            var d = b2Math_1.b2Vec2.SubVV(p2, p1, b2Rope.s_d);
            var L = d.Normalize();
            var im1 = this.m_ims[i];
            var im2 = this.m_ims[i + 1];
            if (im1 + im2 === 0) {
                continue;
            }
            var s1 = im1 / (im1 + im2);
            var s2 = im2 / (im1 + im2);
            p1.SelfMulSub(this.m_k2 * s1 * (this.m_Ls[i] - L), d);
            p2.SelfMulAdd(this.m_k2 * s2 * (this.m_Ls[i] - L), d);
            // this.m_ps[i] = p1;
            // this.m_ps[i + 1] = p2;
        }
    };
    b2Rope.prototype.SetAngle = function (angle) {
        var count3 = this.m_count - 2;
        for (var i = 0; i < count3; ++i) {
            this.m_as[i] = angle;
        }
    };
    b2Rope.prototype.SolveC3 = function () {
        var count3 = this.m_count - 2;
        for (var i = 0; i < count3; ++i) {
            var p1 = this.m_ps[i];
            var p2 = this.m_ps[i + 1];
            var p3 = this.m_ps[i + 2];
            var m1 = this.m_ims[i];
            var m2 = this.m_ims[i + 1];
            var m3 = this.m_ims[i + 2];
            var d1 = b2Math_1.b2Vec2.SubVV(p2, p1, b2Rope.s_d1);
            var d2 = b2Math_1.b2Vec2.SubVV(p3, p2, b2Rope.s_d2);
            var L1sqr = d1.LengthSquared();
            var L2sqr = d2.LengthSquared();
            if (L1sqr * L2sqr === 0) {
                continue;
            }
            var a = b2Math_1.b2Vec2.CrossVV(d1, d2);
            var b = b2Math_1.b2Vec2.DotVV(d1, d2);
            var angle = b2Math_1.b2Atan2(a, b);
            var Jd1 = b2Math_1.b2Vec2.MulSV((-1 / L1sqr), d1.SelfSkew(), b2Rope.s_Jd1);
            var Jd2 = b2Math_1.b2Vec2.MulSV((1 / L2sqr), d2.SelfSkew(), b2Rope.s_Jd2);
            var J1 = b2Math_1.b2Vec2.NegV(Jd1, b2Rope.s_J1);
            var J2 = b2Math_1.b2Vec2.SubVV(Jd1, Jd2, b2Rope.s_J2);
            var J3 = Jd2;
            var mass = m1 * b2Math_1.b2Vec2.DotVV(J1, J1) + m2 * b2Math_1.b2Vec2.DotVV(J2, J2) + m3 * b2Math_1.b2Vec2.DotVV(J3, J3);
            if (mass === 0) {
                continue;
            }
            mass = 1 / mass;
            var C = angle - this.m_as[i];
            while (C > b2Settings_1.b2_pi) {
                angle -= 2 * b2Settings_1.b2_pi;
                C = angle - this.m_as[i];
            }
            while (C < -b2Settings_1.b2_pi) {
                angle += 2 * b2Settings_1.b2_pi;
                C = angle - this.m_as[i];
            }
            var impulse = -this.m_k3 * mass * C;
            p1.SelfMulAdd((m1 * impulse), J1);
            p2.SelfMulAdd((m2 * impulse), J2);
            p3.SelfMulAdd((m3 * impulse), J3);
            // this.m_ps[i] = p1;
            // this.m_ps[i + 1] = p2;
            // this.m_ps[i + 2] = p3;
        }
    };
    b2Rope.prototype.Draw = function (draw) {
        var c = new b2Draw_1.b2Color(0.4, 0.5, 0.7);
        for (var i = 0; i < this.m_count - 1; ++i) {
            draw.DrawSegment(this.m_ps[i], this.m_ps[i + 1], c);
        }
    };
    ///
    b2Rope.s_d = new b2Math_1.b2Vec2();
    b2Rope.s_d1 = new b2Math_1.b2Vec2();
    b2Rope.s_d2 = new b2Math_1.b2Vec2();
    b2Rope.s_Jd1 = new b2Math_1.b2Vec2();
    b2Rope.s_Jd2 = new b2Math_1.b2Vec2();
    b2Rope.s_J1 = new b2Math_1.b2Vec2();
    b2Rope.s_J2 = new b2Math_1.b2Vec2();
    return b2Rope;
}());
exports.b2Rope = b2Rope;
//# sourceMappingURL=data:application/json;base64,