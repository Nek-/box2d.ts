import { b2Vec2, b2Rot } from "../../Common/b2Math";
import { b2Joint, b2JointDef } from "./b2Joint";
import { b2SolverData } from "../b2TimeStep";
import { b2Body } from "../b2Body";
export declare class b2WheelJointDef extends b2JointDef {
    localAnchorA: b2Vec2;
    localAnchorB: b2Vec2;
    localAxisA: b2Vec2;
    enableMotor: boolean;
    maxMotorTorque: number;
    motorSpeed: number;
    frequencyHz: number;
    dampingRatio: number;
    constructor();
    Initialize(bA: b2Body, bB: b2Body, anchor: b2Vec2, axis: b2Vec2): void;
}
export declare class b2WheelJoint extends b2Joint {
    m_frequencyHz: number;
    m_dampingRatio: number;
    m_localAnchorA: b2Vec2;
    m_localAnchorB: b2Vec2;
    m_localXAxisA: b2Vec2;
    m_localYAxisA: b2Vec2;
    m_impulse: number;
    m_motorImpulse: number;
    m_springImpulse: number;
    m_maxMotorTorque: number;
    m_motorSpeed: number;
    m_enableMotor: boolean;
    m_indexA: number;
    m_indexB: number;
    m_localCenterA: b2Vec2;
    m_localCenterB: b2Vec2;
    m_invMassA: number;
    m_invMassB: number;
    m_invIA: number;
    m_invIB: number;
    m_ax: b2Vec2;
    m_ay: b2Vec2;
    m_sAx: number;
    m_sBx: number;
    m_sAy: number;
    m_sBy: number;
    m_mass: number;
    m_motorMass: number;
    m_springMass: number;
    m_bias: number;
    m_gamma: number;
    m_qA: b2Rot;
    m_qB: b2Rot;
    m_lalcA: b2Vec2;
    m_lalcB: b2Vec2;
    m_rA: b2Vec2;
    m_rB: b2Vec2;
    constructor(def: b2WheelJointDef);
    GetMotorSpeed(): number;
    GetMaxMotorTorque(): number;
    SetSpringFrequencyHz(hz: number): void;
    GetSpringFrequencyHz(): number;
    SetSpringDampingRatio(ratio: number): void;
    GetSpringDampingRatio(): number;
    private static InitVelocityConstraints_s_d;
    private static InitVelocityConstraints_s_P;
    InitVelocityConstraints(data: b2SolverData): void;
    private static SolveVelocityConstraints_s_P;
    SolveVelocityConstraints(data: b2SolverData): void;
    private static SolvePositionConstraints_s_d;
    private static SolvePositionConstraints_s_P;
    SolvePositionConstraints(data: b2SolverData): boolean;
    GetDefinition(def: b2WheelJointDef): b2WheelJointDef;
    GetAnchorA(out: b2Vec2): b2Vec2;
    GetAnchorB(out: b2Vec2): b2Vec2;
    GetReactionForce(inv_dt: number, out: b2Vec2): b2Vec2;
    GetReactionTorque(inv_dt: number): number;
    GetLocalAnchorA(): b2Vec2;
    GetLocalAnchorB(): b2Vec2;
    GetLocalAxisA(): b2Vec2;
    GetJointTranslation(): number;
    GetJointSpeed(): number;
    GetPrismaticJointTranslation(): number;
    GetPrismaticJointSpeed(): number;
    GetRevoluteJointAngle(): number;
    GetRevoluteJointSpeed(): number;
    IsMotorEnabled(): boolean;
    EnableMotor(flag: boolean): void;
    SetMotorSpeed(speed: number): void;
    SetMaxMotorTorque(force: number): void;
    GetMotorTorque(inv_dt: number): number;
    Dump(log: (format: string, ...args: any[]) => void): void;
}
