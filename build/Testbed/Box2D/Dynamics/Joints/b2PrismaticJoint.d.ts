import { b2Vec2, b2Mat22, b2Vec3, b2Mat33, b2Rot } from "../../Common/b2Math";
import { b2Body } from "../b2Body";
import { b2Joint, b2JointDef, b2LimitState } from "./b2Joint";
import { b2SolverData } from "../b2TimeStep";
export declare class b2PrismaticJointDef extends b2JointDef {
    localAnchorA: b2Vec2;
    localAnchorB: b2Vec2;
    localAxisA: b2Vec2;
    referenceAngle: number;
    enableLimit: boolean;
    lowerTranslation: number;
    upperTranslation: number;
    enableMotor: boolean;
    maxMotorForce: number;
    motorSpeed: number;
    constructor();
    Initialize(bA: b2Body, bB: b2Body, anchor: b2Vec2, axis: b2Vec2): void;
}
export declare class b2PrismaticJoint extends b2Joint {
    m_localAnchorA: b2Vec2;
    m_localAnchorB: b2Vec2;
    m_localXAxisA: b2Vec2;
    m_localYAxisA: b2Vec2;
    m_referenceAngle: number;
    m_impulse: b2Vec3;
    m_motorImpulse: number;
    m_lowerTranslation: number;
    m_upperTranslation: number;
    m_maxMotorForce: number;
    m_motorSpeed: number;
    m_enableLimit: boolean;
    m_enableMotor: boolean;
    m_limitState: b2LimitState;
    m_indexA: number;
    m_indexB: number;
    m_localCenterA: b2Vec2;
    m_localCenterB: b2Vec2;
    m_invMassA: number;
    m_invMassB: number;
    m_invIA: number;
    m_invIB: number;
    m_axis: b2Vec2;
    m_perp: b2Vec2;
    m_s1: number;
    m_s2: number;
    m_a1: number;
    m_a2: number;
    m_K: b2Mat33;
    m_K3: b2Mat33;
    m_K2: b2Mat22;
    m_motorMass: number;
    m_qA: b2Rot;
    m_qB: b2Rot;
    m_lalcA: b2Vec2;
    m_lalcB: b2Vec2;
    m_rA: b2Vec2;
    m_rB: b2Vec2;
    constructor(def: b2PrismaticJointDef);
    private static InitVelocityConstraints_s_d;
    private static InitVelocityConstraints_s_P;
    InitVelocityConstraints(data: b2SolverData): void;
    private static SolveVelocityConstraints_s_P;
    private static SolveVelocityConstraints_s_f2r;
    private static SolveVelocityConstraints_s_f1;
    private static SolveVelocityConstraints_s_df3;
    private static SolveVelocityConstraints_s_df2;
    SolveVelocityConstraints(data: b2SolverData): void;
    private static SolvePositionConstraints_s_d;
    private static SolvePositionConstraints_s_impulse;
    private static SolvePositionConstraints_s_impulse1;
    private static SolvePositionConstraints_s_P;
    SolvePositionConstraints(data: b2SolverData): boolean;
    GetAnchorA(out: b2Vec2): b2Vec2;
    GetAnchorB(out: b2Vec2): b2Vec2;
    GetReactionForce(inv_dt: number, out: b2Vec2): b2Vec2;
    GetReactionTorque(inv_dt: number): number;
    GetLocalAnchorA(): b2Vec2;
    GetLocalAnchorB(): b2Vec2;
    GetLocalAxisA(): b2Vec2;
    GetReferenceAngle(): number;
    private static GetJointTranslation_s_pA;
    private static GetJointTranslation_s_pB;
    private static GetJointTranslation_s_d;
    private static GetJointTranslation_s_axis;
    GetJointTranslation(): number;
    GetJointSpeed(): number;
    IsLimitEnabled(): boolean;
    EnableLimit(flag: boolean): void;
    GetLowerLimit(): number;
    GetUpperLimit(): number;
    SetLimits(lower: number, upper: number): void;
    IsMotorEnabled(): boolean;
    EnableMotor(flag: boolean): void;
    SetMotorSpeed(speed: number): void;
    GetMotorSpeed(): number;
    SetMaxMotorForce(force: number): void;
    GetMaxMotorForce(): number;
    GetMotorForce(inv_dt: number): number;
    Dump(log: (format: string, ...args: any[]) => void): void;
}
