import { b2Vec2, b2Rot } from "../../Common/b2Math";
import { b2Body } from "../b2Body";
import { b2Joint, b2JointDef } from "./b2Joint";
import { b2SolverData } from "../b2TimeStep";
export declare const b2_minPulleyLength: number;
export declare class b2PulleyJointDef extends b2JointDef {
    groundAnchorA: b2Vec2;
    groundAnchorB: b2Vec2;
    localAnchorA: b2Vec2;
    localAnchorB: b2Vec2;
    lengthA: number;
    lengthB: number;
    ratio: number;
    constructor();
    Initialize(bA: b2Body, bB: b2Body, groundA: b2Vec2, groundB: b2Vec2, anchorA: b2Vec2, anchorB: b2Vec2, r: number): void;
}
export declare class b2PulleyJoint extends b2Joint {
    m_groundAnchorA: b2Vec2;
    m_groundAnchorB: b2Vec2;
    m_lengthA: number;
    m_lengthB: number;
    m_localAnchorA: b2Vec2;
    m_localAnchorB: b2Vec2;
    m_constant: number;
    m_ratio: number;
    m_impulse: number;
    m_indexA: number;
    m_indexB: number;
    m_uA: b2Vec2;
    m_uB: b2Vec2;
    m_rA: b2Vec2;
    m_rB: b2Vec2;
    m_localCenterA: b2Vec2;
    m_localCenterB: b2Vec2;
    m_invMassA: number;
    m_invMassB: number;
    m_invIA: number;
    m_invIB: number;
    m_mass: number;
    m_qA: b2Rot;
    m_qB: b2Rot;
    m_lalcA: b2Vec2;
    m_lalcB: b2Vec2;
    constructor(def: b2PulleyJointDef);
    private static InitVelocityConstraints_s_PA;
    private static InitVelocityConstraints_s_PB;
    InitVelocityConstraints(data: b2SolverData): void;
    private static SolveVelocityConstraints_s_vpA;
    private static SolveVelocityConstraints_s_vpB;
    private static SolveVelocityConstraints_s_PA;
    private static SolveVelocityConstraints_s_PB;
    SolveVelocityConstraints(data: b2SolverData): void;
    private static SolvePositionConstraints_s_PA;
    private static SolvePositionConstraints_s_PB;
    SolvePositionConstraints(data: b2SolverData): boolean;
    GetAnchorA(out: b2Vec2): b2Vec2;
    GetAnchorB(out: b2Vec2): b2Vec2;
    GetReactionForce(inv_dt: number, out: b2Vec2): b2Vec2;
    GetReactionTorque(inv_dt: number): number;
    GetGroundAnchorA(): b2Vec2;
    GetGroundAnchorB(): b2Vec2;
    GetLengthA(): number;
    GetLengthB(): number;
    GetRatio(): number;
    private static GetCurrentLengthA_s_p;
    GetCurrentLengthA(): number;
    private static GetCurrentLengthB_s_p;
    GetCurrentLengthB(): number;
    Dump(log: (format: string, ...args: any[]) => void): void;
    ShiftOrigin(newOrigin: b2Vec2): void;
}
